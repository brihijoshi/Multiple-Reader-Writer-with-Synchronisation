CSE231: Operating Systems
Assignment 3
Brihi Joshi (2016142)
Taejas Gupta (2016204)
April 13, 2018



1. Multiple Reader Writer With Synchronization



* Description of code and implementation details
	
	
	- Overview of the shared queue and semaphores used

		In order to implement the multiple reader writer problem while ensuring that there are no race conditions, we have used an array based queue (sq) with a maximum capacity of 1024 to implement the shared queue and an array of binary semaphores (x_mutex) to implement locks corresponding to each element in the shared queue.

		Integers F and R keep a track of the indices corresponding to the front and rear of the shared queue respectively.

		As we have used binary semaphores, in order to enable multiple readers to read an element of the shared queue concurrently, we have an integer array (r_num) that keeps track of the number of readers that are currently reading the element corresponding to the same index in the array. To ensure that access to these reader count values is also free of race conditions, we have used another array of binary semaphores (r_mutex) for accessing elements of the array r_num.

		For ensuring that only one writer can update the queue at a time, we have a binary semaphore (w_mutex), which is to be acquired by a writer befores it attempts to update the shared queue, and releases it when it is done updating the shared queue.

		To allow only one reader to dequeue an element from the shared queue at a time, a binary semaphore (deq_mutex) has been used. Likewise, to allow only one writer to enqueue an element to the queue, a binary semaphore (enq_mutex) has been used.

	
	- Explanation of the main function and user input

		The program commences by initialising the shared queue to a 10 element queue {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}. F is set to 0 and R is set to 10, and all semaphores are initialised.

		The user is asked to enter the number of readers and the number of writers, each of which must be an integer between 0 and 1024.

		For each reader, the user is asked to select whether he/she would like the reader to (1) read an arbitrary element from the shared queue or (2) dequeue the front element. If the user selects option 1, then the user is additionally prompted to enter another integer between 0 and 1023, corresponding to the index of the element in the array whose value the reader has to read.

		For each writer, the user is asked to select whether he/she would like the writer to (1) write to an arbitrary element on the shared queue or (2) enqueue a new element at the rear of the shared queue. If the user selects option 1, then the user is additionally prompted to enter another integer between 0 and 1023, corresponding to the index of the element in the array to which the writer has to write. Finally, the user is prompted to enter the value to be written by that writer, which can be any integer value.

		Two struct arrays (r_args and w_args) of types reader_args and writer_args (defined in the program) respectively are maintained for storing the user imput data. The user input information for the (i+1)th reader is stored in the element at the (i)th index of r_args and the user input information for the (j+1)th writer is stores in the element at the (j)th index of w_args (0 indexed).

		For each reader and writer, a pthread is created using pthread_create with the function corresponding to the option selected by the user and the corresponding element of r_args or w_args being passed as the argument.

		Finally, the main program waits for all threads to complete their execution using pthread_join, after which the program terminates.

	
	- Explanation of the functions that pthreads execute

		1. dequeue

			When a reader has to dequeue an element from the front of the queue, it must first acquire deq_mutex to ensure that no two readers are dequeuing the same element. If F = R, it implies that the queue is empty, and an underflow message is printed. Else, the reader acquires x_mutex[F], stores the value at the front F in a temporary variable, increments F, prints the value and then releases all its locks.

		2. enqueue

			When a writer has to enqueue an element to the rear of the queue, it must first acquire w_mutex to ensure that no other writer is updating the queue, then it must acquire enq_mutex to ensure that it is the only thread enqueuing to the queue. If R = 1024, it implies that the queue is full, and an overflow message is printed. Else, the writer acquires x_mutex[R], writes the value to the shared queue at the rear, increments R and then releases all its locks.

		3. read_element

			When a reader has to read an element from the shared queue at a given index pos, it must first acquire r_mutex[pos] to first check the number of readers that are currently reading that element. If the number of readers is 0, it implies that the current reader must acquire x_mutex[pos] to ensure that no writer is able to access that element of the shared queue while any reader is reading that element. Before acquiring x_mutex[pos], however, the reader must check that pos lies between F and R, within the bounds of the queue; if pos < F or pos >= R, then an index out of bounds message is printed and the thread releases all its acquired locks and terminates. If the number of readers is found to be greater than 0, it implies that a reader has already acquired x_mutex[pos] and the current reader does not need to acquire that lock. The reader then increments the number of readers at r_num[pos] and releases r_mutex[pos]. Then, the reader stores the value at pos in a temporary variable and prints the value. Finally, the reader acquires r_mutex[pos] once again and decrements r_num[pos], indicating that it is no longer reading that element in the queue. If the value of r_num[pos] has dropped to 0, it indicates that the current reader was the last reader reading that element, and it releases x_mutex[pos] to allow writers to write to that element. Then, the reader releases r_mutex[pos].

		4. write_element (extra function)

			When a writer has to write an element to the shared queue at a given index pos, it must first acquire w_mutex to ensure that no other writer is updating the queue, then it must acquire x_mutex[pos] to ensure that no reader can access that element of the queue while the writer is updating it. if pos < F or pos >= R, then an index out of bounds message is printed and the thread releases all its acquired locks and terminates. Else, the writer writes the value to sq[pos] and releases all its acquired locks.



* Compiling and testing the program

	In order to compile the program, use the command 'make'.
	
	Use './sync' to run the program.



* Inputs that the user should give

	User input has been explained in the 'Explanation of the main function and user input' section above.



* Expected output and how to interpret it

	Each reader and writer prints a line corresponding to the operation that it performed to the console. Each thread that does not encounder an index out of bounds, overflow or underflow error sleeps for 2 seconds before generating its output. By observing the time at which each thread prints its corresponding output, it can be seen that multiple readers are able to read from an element at the same time, only one writer is able to write to an element at a time, only one reader is able to perform the dequeue operation at a time and only one writer is able to perform the enqueue operation at a time. Moreover, only one writer is able to update the queue by writing to an element or enqueuing at any time.



* Error values and how to interpret them

	When prompted to enter the number of readers or writers, if less than 0 or more than 1024 is entered, the corresponding error message is displayed and the user is asked to enter the number again.

	When prompted to select the operation to be performed, if an integer value other than 1 or 2 is entered, the corresponding error message is displayed and the user is asked to enter the choice again.

	When prompted to enter the index to which a value is to be written to or read from, if less than 0 or more than 1023 is entered, the corresponding error message is displayed and the user is asked to enter the index again.

	If a reader attempts to dequeue from an empty queue (that is, F = R), then an underflow message is displayed and the execution of that thread terminates.

	If a writer attempts to enqueue to a full queue (R = MAX_SIZE), then an overflow message is displayed and the execution of that thread terminates.

	If a reader/writer attempts to read from/write to an index that is not within the bounds of the queue, an index out of bounds message is displayed and the execution of that thread terminates.